{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 这里记录一些杂七杂八的操作 免密登录和多SSH-Key共存 免密登录确切的说应该是密钥登录，在本地生成一对密钥，将公钥拷贝到远程服务器的~/.ssh/authorized_keys文件中，这样ssh就可以直接连接到远程主机上，不需要再自己输入密码。scp和rsync命令也不需要再敲一遍密码。 本地主机: ssh-keygen -t rsa 默认生成的私钥为 ~/.ssh/id_rsa 生成的公钥为~/ssh/id_rsa.pub 但是因为我已经有这两个文件（gitlab的sshkey），再生成就会将其覆盖掉。所以要指定保存为其他的文件名 ssh-keygen -t rsa -f docserver_id_rsa 但是由于 "},"查询.html":{"url":"查询.html","title":"查询","keywords":"","body":"cpu查询 top Tasks: 139 total, 1 running, 137 sleeping, 1 stopped, 0 zombie %Cpu(s): 3.4 us, 0.9 sy, 0.0 ni, 95.6 id, 0.0 wa, 0.0 hi, 0.1 si, 0.0 st KiB Mem : 8171896 total, 232032 free, 1512068 used, 6427796 buff/cache KiB Swap: 4194300 total, 4190964 free, 3336 used. 6290840 avail Mem top命令显示系统的内存占用率 %Cpu(s)一行就是cpu的使用情况，us是指用户空间程序的cpu使用率，sy是指系统空间内核程序的cpu使用率。id是空闲cpu top命令同样可查内存，不过我们还是更习惯用free -h 内存查询 free -h free命令显示系统内存使用状况，带-h参数以人类易读的GB、MB、\bKB为单位显示 total used free shared buff/cache available Mem: 344M 87M 47M 5.4M 208M 224M Swap: 255M 125M 130M 磁盘查询 df -h df是列出文件系统的整体磁盘空间使用情况。但是单这个命令列出来的容量是以1KB为单位,非常抽象。我们同样带-h 文件系统 容量 已用 可用 已用% 挂载点 /dev/mapper/centos-root 55G 15G 41G 27% / devtmpfs 3.9G 0 3.9G 0% /dev tmpfs 3.9G 0 3.9G 0% /dev/shm tmpfs 3.9G 33M 3.9G 1% /run tmpfs 3.9G 0 3.9G 0% /sys/fs/cgroup /dev/sda1 1014M 133M 882M 14% /boot tmpfs 799M 0 799M 0% /run/user/0 文件查询 ls命令查看目录下的文件 ls -a 显示所有文件（包括隐藏文件） ls -l 带上-l参数，还会将文件的权限、所有者、文件大小等信息详细列出来。 同free -h 和 df -h，可以ls -lh，这样显示出来的文件大小就人类可读 ls -lh 总用量 3.7G -rw-r--r-- 1 blocface blocface 3.0G 7月 19 17:59 blocface-centos7-0719.tar.gz drwxr-xr-x 3 blocface blocface 21 7月 20 10:22 centos7 -rwxrwxrwx 1 blocface blocface 152M 7月 20 10:22 console.tar.gz drwxr-xr-x 8 blocface blocface 97 7月 20 10:29 deploy -rwxrwxrwx 1 blocface blocface 17M 7月 20 10:14 etcd-2.tar.gz -rwxrwxrwx 1 blocface blocface 18M 7月 20 10:15 hostagent.tar.gz -rwxrwxrwx 1 blocface blocface 16M 7月 20 10:15 minio-3.tar.gz -rwxrwxrwx 1 blocface blocface 471M 7月 20 10:15 third-1.tar.gz 此外，Linux有一个命令md5sum可以直接计算文件的md5值，非常有用。而且修改文件名是不改变文件的md5值的 进程查询 ps -aux 显示终端下所有进程，且显示的信息比较完整。（\b表头包括USER、PID、CPU和内存的占用率、起始时间、命令） USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.0 51824 3384 ? Ss 6月04 2:05 /usr/lib/syste 网络查询 netstat -a (a参数显示所有socket) Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp4 51 0 localhost.54530 localhost.61109 ESTABLISHED tcp4 0 0 localhost.61109 localhost.54530 ESTABLISHED tcp4 0 0 10.1.40.143.61033 tsa01s09-in-f10..https SYN_SENT tcp4 0 0 10.1.40.143.61027 tsa01s09-in-f10..https SYN_SENT tcp4 0 0 10.1.40.143.61023 tsa01s09-in-f10..https SYN_SENT tcp4 0 0 10.1.40.143.61019 103.214.168.106.https SYN_SENT tcp4 0 0 10.1.40.143.61018 180.163.151.166.https ESTABLISHED tcp4 0 0 10.1.40.143.61017 180.163.151.166.https ESTABLISHED tcp4 0 0 10.1.40.143.61012 tsa01s09-in-f10..https SYN_SENT netstat -an (n参数表示连接的地址直接使用ip地址) Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp4 0 0 127.0.0.1.61300 127.0.0.1.61301 ESTABLISHED tcp4 0 0 127.0.0.1.61301 127.0.0.1.61300 ESTABLISHED tcp4 0 0 10.1.40.143.61298 59.82.33.251.443 ESTABLISHED tcp4 0 0 10.1.40.143.61227 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61223 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61218 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61211 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61207 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61203 216.58.200.42.443 SYN_SENT tcp4 0 0 10.1.40.143.61018 180.163.151.166.443 ESTABLISHED tcp4 0 0 10.1.40.143.61017 180.163.151.166.443 ESTABLISHED tcp4 0 0 10.1.40.143.61011 180.163.150.166.443 ESTABLISHED netstat -anp p参数显示该socket连接对应的进程(包括pid和进程名）。 该命令有非常常见的使用场景，经常跟| grep ，找到占用该端口的进程，将其kill掉。 关于kill还有一个可说的就是，有些进程kill pid无效，需要kill -9 9是强制终止信号，立即终止运行，不会被阻塞。但是也因此kill -9不是安全退出，可能产生一些脏数据或异常） Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 172.22.66.86:9000 0.0.0.0:* LISTEN 16325/minio.RELEASE tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 15779/mysqld tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 3618/sshd tcp 0 0 0.0.0.0:10080 0.0.0.0:* LISTEN 18523/nginx: master tcp 0 0 0.0.0.0:18081 0.0.0.0:* LISTEN 18523/nginx: master tcp 0 0 172.22.66.86:5222 0.0.0.0:* LISTEN 15942/nats-server tcp 0 0 172.22.66.86:18081 10.1.41.111:56128 TIME_WAIT - tcp 0 0 172.22.66.86:48734 172.22.66.205:2380 TIME_WAIT - tcp 0 0 172.22.66.86:9000 172.22.66.205:56378 ESTABLISHED 16325/minio.RELEASE tcp 0 0 127.0.0.1:58964 127.0.0.1:9090 ESTABLISHED 15993/prometheus tcp 0 0 172.22.66.86:59716 172.22.66.253:8015 ESTABLISHED 15550/blocface-host tcp 0 0 172.22.66.86:3306 172.22.66.237:43130 ESTABLISHED 15779/mysqld 日志查看 查看完整文件 cat 查看日志文件前20行 head -20 tail默认读文件末尾10行，一般会带上-f参数，用于不断刷新内容，查阅正在改变的文件（实时读取最新内容），这样可以变操作变看日志，实时排查程序出错在哪里 tail -f 如果想按字符串（常见如error）查出现的位置，请看编辑器相关章节内容 "},"编辑器.html":{"url":"编辑器.html","title":"编辑器","keywords":"","body":"vi/vim 首先明确vi共有三种模式：命令模式、编辑模式和末行模式 命令模式 命令模式就是直接打开或者按下esc时的状态 命令模式下的一些快捷键： 查找： 先敲\\，再输入要查的字符串。回车就会搜到 先敲\\是向下搜索，先敲?的话向上搜索 然后搜到了之后，敲n 跳转到下一个搜索结果 光标操作: gg:移动到首行 G:移动到最末行 0:光标移动到行首 $:光标移动到行尾 dd:删除光标所在行 ctrl+f:向下翻页 ctrl+b:向上翻页 u:撤销操作 dG 删除所有内容。（这个快捷键也是比较有用的，我之前都是删除文件后新建同名文件的...） 编辑模式 编辑模式是命令模式下敲i进入的，编辑模式没什么可说的 末行模式 末行模式时命令模式下敲:进入的状态，最主要的就是 决定是否退出编辑和是否保存 q退出、wq保存退出、!强制 此外末行模式下可以通过set nu设置行号查看,set nonu 取消。 直接敲n n是数字（行数），跳转到该行 另外就是，% s///g 全局替换某个字符串 sed 上面介绍了vim如何在末行模式下全局替换字符串，挺有用的。但是论文件的文本操作，特别是逐行读写，行内特定字符串的匹配与处理，更常用的工具其实是sed。 sed，流编辑器，一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。 简而言之，sed就是用于处理匹配到的文本的 sed 选项 sed的选项有很多，最常用的就两个： -n 仅显示script处理后的结果，通常会搭配最后带参数p的命令。将受影响的行处理结果打印出来 -i 将处理的结果应用到原文件上，即保存更改 # cat test.txt I love read book book is peoele's friend # sed \"s/book/books/g\" test.txt I love read books books is peoele's friend # 这是输出结果，但是实际上test.txt并未发生改变 # cat test.txt I love read book book is peoele's friend # sed -n \"s/book/books/g\" test.txt # 没有任何输出 # sed -n \"s/book/books/g p\" test.txt # -n搭配命令参数p，打印受影响的行 I love read books books is peoele's friend # sed -i \"s/book/books/g\" test.txt # 要替换的字符串在前，用于替换的字符串在后。同样没有任何输出 # 但 cat test.txt 发现替换已经生效了 I love read books books is peoele's friend 命令 命令参数： a\\ # 在选中行下面插入文本。 i\\ # 在选中行上面插入文本。 c\\ # 把选中行改为新的文本。 d # 删除delete，删除选择的行。 p #打印print，该命令会打印当前选择的行到屏幕上 如何选中行，可以直接用行号，直接把行号写在命令参数前。如何选中连续多行？2,5表示第2行到第5行而非第2行和第5行。2p;5p表示打印第2行和第5行 # sed -i \"2i\\book is good\" test.txt # cat test.txt I love read books book is good books is peoele's friend # sed -i \"2d\" test.txt # cat test.txt I love read books books is peoele's friend # sed -i \"/I love read books/d\" test.txt # cat test.txt # 匹配到一行删除 books is peoele's friend awk awk也是逐行读入处理，但awk的处理主要是将该行的内容按特定格式切片提取出来。因此awk一般用于处理每行格式相同的文本文件或命令结果，将其格式化输出。 awk 因为awk常常用于处理命令结果，所以也可以管道符|来连接使用，把前一命令的stdout作为自己的stdin 选项 最常见的选项就一个-F，用于指定分隔符（可以写正则表达式）。默认的分隔符是空格或tab 命令 最常用的命令 '{print $1}' 打印每行的第几列 $1 每行的第一列，这是awk的内置变量： $0 #当前记录 $1~$n #当前记录的第N个字段 FS #输入字段分隔符（-F相同作用）默认空格 RS #输入记录分割符，默认换行符 NF #字段数，就是列号 NR #记录数，就是行号，默认从1开始 awk里是可以用if加上条件判断的 {if (condition) {action}} 所以如果有时候输出会带表头，我们可以用if和内置变量(NR)排除掉前几行。 联动xargs xargs 可以将管道或标准输入（stdin）数据转换成命令行参数（捕获一个命令的输出，然后作为参数传递给另外一个命令）所以xargs和管道常常一起使用。 也经常有awk和xargs一起使用的场景 supervisorctl status | awk '{print $1}'| xargs -I {} supervisorctl stop {} 暂停所有服务 其实不需要加-I {}，甚至stop后面不需要跟{}都是可以的。但是这样更规范标准一点。 -I {}是告诉xargs，后面的命令中，用{}表示占位符，将会被实际的参数替代。 "}}